"use strict";

function _instanceof(t, e) {
    return null != e && "undefined" != typeof Symbol && e[Symbol.hasInstance] ? !!e[Symbol.hasInstance](t) : t instanceof e
}

function _classCallCheck(t, e) {
    if (!_instanceof(t, e)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(t, e) {
    for (var i = 0; i < e.length; i++) {
        var n = e[i];
        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n)
    }
}

function _createClass(t, e, i) {
    return e && _defineProperties(t.prototype, e), i && _defineProperties(t, i), t
}(function() {
    function t() {
        this.classList.add("hover")
    }

    function e() {
        this.classList.remove("hover")
    }

    function i(i) {
        i.addEventListener("mouseover", t.bind(i)), i.addEventListener("mouseout", e.bind(i))
    }

    function n(t) {
        var e = t.offsetWidth,
            i = t.getBoundingClientRect().width;
        return i / e
    }

    function s(t) {
        var e = t.type.indexOf("touch") > -1,
            i = e ? t.changedTouches[0] : t;
        return {
            x: i.clientX,
            y: i.clientY
        }
    }

    function a(t) {
        return document.elementFromPoint(s(t).x, s(t).y)
    }

    function r(t, e) {
        return t.contains(e)
    }

    function o() {
        return document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement || document.fullscreenElement || null
    }

    function l(t) {
        t.style.width = "100%", t.style.height = "100%", t.requestFullscreen ? t.requestFullscreen() : t.webkitEnterFullScreen ? t.webkitEnterFullScreen() : t.msRequestFullscreen ? t.msRequestFullscreen() : t.mozRequestFullScreen ? t.mozRequestFullScreen() : t.webkitRequestFullscreen && t.webkitRequestFullscreen()
    }

    function c() {
        this.container.style.width = "", this.container.style.height = "", document.exitFullscreen ? document.exitFullscreen() : document.msExitFullscreen ? document.msExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen()
    }

    function h() {
        function t() {
            function t() {
                var t = this.progress.clientWidth * this.currentTime / this.duration;
                this.progressHandler.dom.style.transform = "translateX(".concat(t, "px)"), this.repositionBookmark(), i++, i > 400 && clearInterval(e)
            }
            var e, i = 0;
            e = setInterval(t.bind(this))
        }
        t.bind(this)(), this.isFullscreenMode ? c.bind(this)() : l(this.container)
    }

    function u() {
        o() ? (this.isFullscreenMode = !0, this.fullScreenBtn.classList.add("exit")) : (this.isFullscreenMode = !1, this.fullScreenBtn.classList.remove("exit"))
    }
    var d = "bookmark",
        m = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform),
        v = "data-speaker",
        f = "data-speaker-media",
        p = "controller",
        y = "playBtn",
        k = "pauseBtn",
        g = "stopBtn",
        b = "captionBtn",
        E = "fullScreenBtn",
        T = "screenPlayBtn",
        B = "handleBar",
        P = "handleColorBar",
        C = "handler",
        L = "timeContainer",
        A = "curTime",
        R = "totalTime",
        w = "isPlay",
        x = function() {
            function t(e, i) {
                _classCallCheck(this, t), this.dom = e, this.callback = i, this.play = this.play.bind(this), this.pause = this.pause.bind(this), this.stop = this.stop.bind(this), this.setting = this.setting.bind(this), this.dom.addEventListener("loadedmetadata", this.setting), this.dom.load()
            }
            return _createClass(t, [{
                key: "play",
                value: function() {
                    this.dom.play()
                }
            }, {
                key: "pause",
                value: function() {
                    this.dom.pause()
                }
            }, {
                key: "stop",
                value: function() {
                    this.pause(), this.dom.currentTime = 0
                }
            }, {
                key: "setting",
                value: function() {
                    console.log("media setting!"), this.callback()
                }
            }, {
                key: "duration",
                get: function() {
                    return this.dom.duration
                }
            }, {
                key: "currentTime",
                get: function() {
                    return this.dom.currentTime
                },
                set: function(t) {
                    this.dom.currentTime = t
                }
            }]), t
        }(),
        M = function() {
            function t(e) {
                _classCallCheck(this, t)
            }
            return _createClass(t, [{
                key: "hide",
                value: function() {}
            }]), t
        }(),
        O = function() {
            function t(e) {
                _classCallCheck(this, t), this.container = $ts.ce({
                    tag: "div",
                    class: L,
                    parent: e
                }), this.curTimeEl = $ts.ce({
                    tag: "div",
                    class: A,
                    parent: this.container
                }), this.totalTimeEl = $ts.ce({
                    tag: "div",
                    class: R,
                    parent: this.container
                })
            }
            return _createClass(t, [{
                key: "currentTime",
                value: function(t) {
                    var e = Math.floor(t / 60),
                        i = Math.floor(t % 60);
                    this.curTimeEl.innerHTML = "".concat(e < 10 ? "0" + e : e, ":").concat(i < 10 ? "0" + i : i)
                }
            }, {
                key: "duration",
                value: function(t) {
                    var e = Math.floor(t / 60),
                        i = Math.floor(t % 60);
                    this.totalTimeEl.innerHTML = "".concat(e < 10 ? "0" + e : e, ":").concat(i < 10 ? "0" + i : i)
                }
            }, {
                key: "set",
                value: function(t) {
                    this.currentTime(t.currentTime), this.duration(t.duration)
                }
            }]), t
        }(),
        F = function() {
            function t(e) {
                var i = e.dom,
                    n = e.callback,
                    s = e.controller;
                _classCallCheck(this, t), this.dom = i, this.controller = s, this.callback = n, this.Data = {
                    width: this.dom.offsetWidth,
                    height: this.dom.offsetHeight,
                    x: this.dom.getBoundingClientRect().left,
                    y: this.dom.getBoundingClientRect().top
                }, this.binding(), this.dom.addEventListener("mousedown", this.start), this.dom.addEventListener("touchstart", this.start)
            }
            return _createClass(t, [{
                key: "start",
                value: function(t) {
                    this.addvent(), this.startData = s(t), this.callback.start && this.callback.start(this)
                }
            }, {
                key: "move",
                value: function(t) {
                    this.moveData = {
                        x: s(t).x - this.startData.x,
                        y: s(t).y - this.startData.y
                    }, r(this.controller, a(t)) || this.out(), this.callback.move && this.callback.move(this)
                }
            }, {
                key: "end",
                value: function(t) {
                    this.removeEvent(), this.callback.end && this.callback.end(this)
                }
            }, {
                key: "out",
                value: function() {
                    arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                    this.removeEvent(), this.moveData = {
                        x: 0,
                        y: 0
                    }, this.callback.out && this.callback.out(this)
                }
            }, {
                key: "changePosition",
                value: function(t) {
                    var e = "translateX(".concat(t, "px)");
                    this.dom.style.transform = e, this.dom.style.msTransform = e, this.dom.style.mozTransform = e, this.dom.style.webkitTransform = e
                }
            }, {
                key: "addvent",
                value: function() {
                    document.addEventListener("mousemove", this.move), document.addEventListener("touchmove", this.move), document.addEventListener("mouseup", this.end), document.addEventListener("touchend", this.end)
                }
            }, {
                key: "removeEvent",
                value: function() {
                    document.removeEventListener("mousemove", this.move), document.removeEventListener("touchmove", this.move), document.removeEventListener("mouseup", this.end), document.removeEventListener("touchend", this.end)
                }
            }, {
                key: "binding",
                value: function() {
                    this.start = this.start.bind(this), this.move = this.move.bind(this), this.end = this.end.bind(this), this.out = this.out.bind(this), this.changePosition = this.changePosition.bind(this)
                }
            }, {
                key: "zoomRate",
                get: function() {
                    return n(this.dom)
                }
            }]), t
        }(),
        S = function() {
            function t(e) {
                var i = this;
                _classCallCheck(this, t), this.OPTS = e, this.container = e.container, this.mediaType = e.mediaType || "audio", this.controlType = e.controlType || "control", this.mediaBtns = e.mediaBtns, this.callback = e.callBack, this.binding(), this.createController(), this.isSpeakerMode && (this.speakerButtons = this.getSpeakerButtons()), this.timer = new O(this.controller), this.volume = new M(this.controller), this.mediaArray = $ts.getEl(this.mediaType, this.container).map(function(t) {
                    return new x(t, i.setTimer)
                }), this.isPlaying = !1, this.RATE = 0, this.BOOKMARK_DATA, m && this.volume.hide(), this.addHoverEvent(), this.addPlayerEvent(), this.container.addEventListener("pointerup", function(t) {
                    t.stopPropagation()
                })
            }
            return _createClass(t, [{
                key: "getMovedData",
                value: function(t) {
                    return t.x / (this.barWidth * this.zoomRate)
                }
            }, {
                key: "fixValue",
                value: function(t) {
                    return t > 1 ? 1 : t < 0 ? 0 : t
                }
            }, {
                key: "getSpeakerButtons",
                value: function() {
                    var t = this,
                        e = $ts.getEl("[".concat(v, '="').concat(this.speakerMediaIndex, '"]'));
                    return e && e.length > 0 && e.forEach(function(e) {
                        i(e), e.addEventListener("click", t.togglePlay)
                    }), e
                }
            }, {
                key: "createController",
                value: function() {
                    var t = this;
                    this.controller = $ts.ce({
                        tag: "div",
                        class: p,
                        parent: this.container
                    }), this.playBtn = $ts.ce({
                        tag: "div",
                        class: y,
                        parent: this.controller
                    }), this.pauseBtn = $ts.ce({
                        tag: "div",
                        class: k,
                        parent: this.controller
                    }), this.stopBtn = $ts.ce({
                        tag: "div",
                        class: g,
                        parent: this.controller
                    }), this.progress = $ts.ce({
                        tag: "div",
                        class: B,
                        parent: this.controller
                    }), this.progressBar = $ts.ce({
                        tag: "div",
                        class: P,
                        parent: this.progress
                    }), this.progressHandler = new F({
                        dom: $ts.ce({
                            tag: "div",
                            class: C,
                            parent: this.progress
                        }),
                        controller: this.controller,
                        callback: {
                            start: function(e) {
                                t.media.isPlaying = t.isPlaying, t.pause()
                            },
                            move: function(e) {
                                var i = t.getMovedData(e.moveData),
                                    n = t.fixValue(t.RATE + i);
                                t.changePlayer(n)
                            },
                            end: function(e) {
                                t.RATE = t.fixValue(t.RATE + t.getMovedData(e.moveData)), t.changePlayer(t.RATE), t.replay(t.RATE < 1 && t.media.isPlaying), t.timeupdate()
                            },
                            out: function(e) {
                                t.RATE = t.fixValue(t.RATE + t.getMovedData(e.moveData)), t.changePlayer(t.RATE), t.replay(t.RATE < 1 && t.media.isPlaying), t.timeupdate()
                            }
                        }
                    }), this.isAudio || (this.fullScreenBtn = $ts.ce({
                        tag: "div",
                        class: E,
                        parent: this.controller
                    }), this.captionBtn = $ts.ce({
                        tag: "div",
                        class: b,
                        parent: this.controller
                    }), this.screenPlayBtn = $ts.ce({
                        tag: "div",
                        class: T,
                        parent: this.container
                    }))
                }
            }, {
                key: "addHoverEvent",
                value: function() {
                    i(this.playBtn), i(this.pauseBtn), i(this.stopBtn), this.fullScreenBtn && i(this.fullScreenBtn), this.captionBtn && i(this.captionBtn), this.screenPlayBtn && i(this.screenPlayBtn)
                }
            }, {
                key: "addPlayerEvent",
                value: function() {
                    this.playBtn.addEventListener("click", this.play), this.pauseBtn.addEventListener("click", this.pause), this.stopBtn.addEventListener("click", this.stop), this.progress.addEventListener("click", this.clickedProgressBar), this.screenPlayBtn && this.screenPlayBtn.addEventListener("click", this.togglePlay), this.fullScreenBtn && this.fullScreenBtn.addEventListener("click", h.bind(this)), document.addEventListener("fullscreenchange", u.bind(this)), document.addEventListener("webkitfullscreenchange", u.bind(this)), document.addEventListener("mozfullscreenchange", u.bind(this)), document.addEventListener("MSFullscreenChange", u.bind(this))
                }
            }, {
                key: "setTimer",
                value: function() {
                    this.timer.set(this.media)
                }
            }, {
                key: "clickedProgressBar",
                value: function(t) {
                    var e = this.progressBar.getBoundingClientRect().left;
                    this.RATE = (s(t).x - e) / this.barWidth, this.changePlayer(this.RATE), this.timeupdate()
                }
            }, {
                key: "timeupdate",
                value: function() {
                    this.RATE = this.media.currentTime / this.media.duration, this.changeprogressBar(this.RATE), this.progressHandler.changePosition(this.barWidth * this.RATE), this.timer.currentTime(this.media.currentTime), this.RATE >= 1 && this.stop()
                }
            }, {
                key: "speakerOnOff",
                value: function(t) {
                    this.speakerButtons.forEach(function(e) {
                        e.classList[t ? "add" : "remove"]("isPlaying")
                    })
                }
            }, {
                key: "play",
                value: function() {
                    this.container.classList.add(w), this.media.play(), this.isPlaying = !0, this.interval = setInterval(this.timeupdate, 10), this.hideControl(), this.container.addEventListener("mouseover", this.mouseOverController), this.isSpeakerMode && this.speakerButtons && this.speakerOnOff(!0), this.callback && this.callback.play && this.callback.play(this)
                }
            }, {
                key: "pause",
                value: function() {
                    this.container.classList.remove(w), this.media.pause(), this.isPlaying = !1, clearInterval(this.interval), this.showControl(), this.container.removeEventListener("mouseover", this.mouseOverController), this.isSpeakerMode && this.speakerButtons && this.speakerOnOff(!1), this.callback && this.callback.pause && this.callback.pause(this)
                }
            }, {
                key: "stop",
                value: function() {
                    this.container.classList.remove(w), this.media.stop(), this.isPlaying = !1, clearInterval(this.interval), this.timeupdate(), this.showControl(), this.container.removeEventListener("mouseover", this.mouseOverController), this.isSpeakerMode && this.speakerButtons && this.speakerOnOff(!1), this.callback && this.callback.stop && this.callback.stop(this)
                }
            }, {
                key: "replay",
                value: function(t) {
                    t && (this.play(), this.media.isPlaying = !1)
                }
            }, {
                key: "togglePlay",
                value: function() {
                    this.isPlaying ? this.pause() : this.play()
                }
            }, {
                key: "changeCurrentTime",
                value: function(t) {
                    this.media.currentTime = this.media.duration * t, this.timer.currentTime(this.media.currentTime)
                }
            }, {
                key: "changeprogressBar",
                value: function(t) {
                    this.progressBar.style.width = "".concat(100 * t, "%")
                }
            }, {
                key: "changePlayer",
                value: function(t) {
                    this.changeCurrentTime(t), this.changeprogressBar(t), this.progressHandler.changePosition(this.barWidth * t)
                }
            }, {
                key: "showControl",
                value: function() {
                    this.controller.classList.remove("hide")
                }
            }, {
                key: "hideControl",
                value: function() {
                    var t = this;
                    setTimeout(function() {
                        t.isPlaying && t.controller.classList.add("hide")
                    }, 1e3)
                }
            }, {
                key: "mouseOverController",
                value: function() {
                    r(this.controller, a(event)) ? this.showControl() : this.hideControl()
                }
            }, {
                key: "setBookmark",
                value: function(t) {
                    var e = this;
                    this.BOOKMARK_DATA = t;
                    var i = function(t) {
                        var i = $ts.ce({
                                tag: "div",
                                class: d,
                                parent: e.controller
                            }),
                            n = (t.time / e.duration).toFixed(2) - 0,
                            s = e.barWidth * n;
                        i.style.left = "".concat(s + e.progress.offsetLeft, "px"), i.addEventListener("click", function(t) {
                            var i = t.target,
                                n = parseInt(i.style.left.replace("px", ""));
                            n -= e.progress.offsetLeft, e.RATE = n / e.barWidth, e.changePlayer(e.RATE), e.timeupdate()
                        })
                    };
                    this.BOOKMARK_DATA && this.BOOKMARK_DATA.forEach(i)
                }
            }, {
                key: "repositionBookmark",
                value: function() {
                    var t = this,
                        e = $ts.getEl(".".concat(d), this.controller);
                    this.BOOKMARK_DATA && this.BOOKMARK_DATA.forEach(function(i, n) {
                        var s = (i.time / t.duration).toFixed(2) - 0,
                            a = e[n],
                            r = t.progress.clientWidth * s;
                        r += t.progress.offsetLeft, a.style.left = "".concat(r, "px")
                    })
                }
            }, {
                key: "binding",
                value: function() {
                    this.play = this.play.bind(this), this.pause = this.pause.bind(this), this.stop = this.stop.bind(this), this.togglePlay = this.togglePlay.bind(this), this.setTimer = this.setTimer.bind(this), this.timeupdate = this.timeupdate.bind(this), this.showControl = this.showControl.bind(this), this.hideControl = this.hideControl.bind(this), this.mouseOverController = this.mouseOverController.bind(this), this.clickedProgressBar = this.clickedProgressBar.bind(this), this.setBookmark = this.setBookmark.bind(this)
                }
            }, {
                key: "isAudio",
                get: function() {
                    return "video" !== this.mediaType
                }
            }, {
                key: "isControlMode",
                get: function() {
                    return "control" === this.controlType
                }
            }, {
                key: "isSpeakerMode",
                get: function() {
                    return "speaker" === this.controlType
                }
            }, {
                key: "isMultiMode",
                get: function() {
                    return this.mediaArray.length > 1
                }
            }, {
                key: "media",
                get: function() {
                    return this.mediaArray[0]
                }
            }, {
                key: "currentTime",
                get: function() {
                    return this.media.currentTime
                }
            }, {
                key: "duration",
                get: function() {
                    return this.media.duration
                }
            }, {
                key: "zoomRate",
                get: function() {
                    return n(this.container)
                }
            }, {
                key: "barWidth",
                get: function() {
                    return this.progress.offsetWidth
                }
            }, {
                key: "speakerMediaIndex",
                get: function() {
                    return this.container.hasAttribute(f) ? this.container.getAttribute(f) : 1
                }
            }]), t
        }();
    window.$controller = S
})(),
function(t) {
    t && t.prototype && null == t.prototype.children && Object.defineProperty(t.prototype, "children", {
        get: function() {
            for (var t, e = 0, i = this.childNodes, n = []; t = i[e++];) 1 === t.nodeType && n.push(t);
            return n
        }
    })
}(window.Node || window.Element);