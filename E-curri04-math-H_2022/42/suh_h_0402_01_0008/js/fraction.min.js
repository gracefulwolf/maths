"use strict";

function _instanceof(t, e) {
    return null != e && "undefined" != typeof Symbol && e[Symbol.hasInstance] ? !!e[Symbol.hasInstance](t) : t instanceof e
}

function _classCallCheck(t, e) {
    if (!_instanceof(t, e)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(t, e) {
    for (var n = 0; n < e.length; n++) {
        var a = e[n];
        a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(t, a.key, a)
    }
}

function _createClass(t, e, n) {
    return e && _defineProperties(t.prototype, e), n && _defineProperties(t, n), t
}(function() {
    function t(t) {
        new e(t)
    }
    var e = function() {
            function t(e) {
                _classCallCheck(this, t), this.dom = e, this.childData = e.innerHTML.replace(/\/(?=[a-z])/g, "!").split("/")[0], this.parentData = e.innerHTML.replace(/\/(?=[a-z])/g, "!").split("/")[1], this.childData = this.childData.replace(/<!/g, "</"), this.parentData = this.parentData.replace(/<!/g, "</"), this.return()
            }
            return _createClass(t, [{
                key: "return",
                value: function() {
                    this.dom.innerHTML = "", this.childDom = $ts.ce({
                        tag: "span",
                        parent: this.dom
                    }), this.bar = $ts.ce({
                        tag: "span",
                        class: "bar",
                        parent: this.dom
                    }), this.parentDom = $ts.ce({
                        tag: "span",
                        parent: this.dom
                    }), this.childDom.innerHTML = this.childData, this.parentDom.innerHTML = this.parentData
                }
            }]), t
        }(),
        n = $ts.getEl("bunsu");
    n && n.length > 0 && n.forEach(t)
})();