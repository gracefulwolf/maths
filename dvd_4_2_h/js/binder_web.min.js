!function(){if(window.$$_version="Jik-ji-Binder_0.5.10_cdbook.web.1",!window.$$_root){var e=function(){var e=window.document.baseURI;if(e){var t=window.location.origin;e=e.substring(t.length);var n=e.indexOf("?");n>-1&&(e=e.substring(0,n))}else{var o=window.document.getElementsByTagName("base");if(o.length>0){e=o[0].href;var t=window.location.origin;e=e.substring(t.length)}e||(e=window.location.pathname)}return e}(),t=e.indexOf("/resource/"),n=e.substring(0,t);window.$$_root=n}}(),function(){!function(e){e=window.$$_version,console.log("\n\n");var t='font-family: "Malgun Gothic"; font-weight: bold;';console.log("%c%s%c%s","color: #F44336; font-size: 20px;"+t,"Jik-ji Binder for WEB","color: #444444; font-size: 14px;"+t," ver."+e),console.log("# Application By Vulcan."),console.log("\n\n\n")}(),window.process||(window.process={}),window.process.cwd||(window.process.cwd=function(){return window.$$_root}),window.require||(window.require=function(e){return"path"==e?(window.$$_path||alert("node.path.js 파일이 필요합니다."),window.$$_path):"url"==e?(window.$$_url||alert("node.url.js 파일이 필요합니다."),window.$$_url):void console.error("[모듈] ",e,"모듈을 로드할 수 없습니다.")}),window.$$_module={core:{},api:{},api2:{}}}(),window.$$_path=function(e){function t(e,t){for(var n=[],o=0;o<e.length;o++){var r=e[o];r&&"."!==r&&(".."===r?n.length&&".."!==n[n.length-1]?n.pop():t&&n.push(".."):n.push(r))}return n}function n(e){for(var t=e.length-1,n=0;n<=t&&!e[n];n++);for(var o=t;o>=0&&!e[o];o--);return 0===n&&o===t?e:n>o?[]:e.slice(n,o+1)}function o(e){var t=l.exec(e),n=(t[1]||"")+(t[2]||""),o=t[3]||"",r=c.exec(o);return[n,r[1],r[2],r[3]]}function r(e){var t=l.exec(e),n=t[1]||"",o=!!n&&":"!==n[1];return{device:n,isUnc:o,isAbsolute:o||!!t[2],tail:t[3]}}function i(e){return"\\\\"+e.replace(/^[\\\/]+/,"").replace(/[\\\/]+/g,"\\")}function a(e){return u.exec(e).slice(1)}var s={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e}},l=/^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/,c=/^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/,h={};h.resolve=function(){for(var e="",n="",o=!1,a=arguments.length-1;a>=-1;a--){var l;if(a>=0?l=arguments[a]:e?(l=void 0)&&l.substr(0,3).toLowerCase()===e.toLowerCase()+"\\"||(l=e+"\\"):l=process.cwd(),!s.isString(l))throw new TypeError("Arguments to path.resolve must be strings");if(l){var c=r(l),h=c.device,u=c.isUnc,f=c.isAbsolute,d=c.tail;if((!h||!e||h.toLowerCase()===e.toLowerCase())&&(e||(e=h),o||(n=d+"\\"+n,o=f),e&&o))break}}return u&&(e=i(e)),n=t(n.split(/[\\\/]+/),!o).join("\\"),e+(o?"\\":"")+n||"."},h.normalize=function(e){var n=r(e),o=n.device,a=n.isUnc,s=n.isAbsolute,l=n.tail,c=/[\\\/]$/.test(l);return l=t(l.split(/[\\\/]+/),!s).join("\\"),l||s||(l="."),l&&c&&(l+="\\"),a&&(o=i(o)),o+(s?"\\":"")+l},h.isAbsolute=function(e){return r(e).isAbsolute},h.join=function(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(!s.isString(n))throw new TypeError("Arguments to path.join must be strings");n&&e.push(n)}var o=e.join("\\");return/^[\\\/]{2}[^\\\/]/.test(e[0])||(o=o.replace(/^[\\\/]{2,}/,"\\")),h.normalize(o)},h.relative=function(e,t){e=h.resolve(e),t=h.resolve(t);for(var o=e.toLowerCase(),r=t.toLowerCase(),i=n(t.split("\\")),a=n(o.split("\\")),s=n(r.split("\\")),l=Math.min(a.length,s.length),c=l,u=0;u<l;u++)if(a[u]!==s[u]){c=u;break}if(0==c)return t;for(var f=[],u=c;u<a.length;u++)f.push("..");return f=f.concat(i.slice(c)),f.join("\\")},h._makeLong=function(e){if(!s.isString(e))return e;if(!e)return"";var t=h.resolve(e);return/^[a-zA-Z]\:\\/.test(t)?"\\\\?\\"+t:/^\\\\[^?.]/.test(t)?"\\\\?\\UNC\\"+t.substring(2):e},h.dirname=function(e){var t=o(e),n=t[0],r=t[1];return n||r?(r&&(r=r.substr(0,r.length-1)),n+r):"."},h.basename=function(e,t){var n=o(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},h.extname=function(e){return o(e)[3]},h.format=function(e){if(!s.isObject(e))throw new TypeError("Parameter 'pathObject' must be an object, not "+typeof e);var t=e.root||"";if(!s.isString(t))throw new TypeError("'pathObject.root' must be a string or undefined, not "+typeof e.root);var n=e.dir,o=e.base||"";return n?n[n.length-1]===h.sep?n+o:n+h.sep+o:o},h.parse=function(e){if(!s.isString(e))throw new TypeError("Parameter 'pathString' must be a string, not "+typeof e);var t=o(e);if(!t||4!==t.length)throw new TypeError("Invalid path '"+e+"'");return{root:t[0],dir:t[0]+t[1].slice(0,-1),base:t[2],ext:t[3],name:t[2].slice(0,t[2].length-t[3].length)}},h.sep="\\",h.delimiter=";";var u=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,f={};return f.resolve=function(){for(var e="",n=!1,o=arguments.length-1;o>=-1&&!n;o--){var r=o>=0?arguments[o]:process.cwd();if(!s.isString(r))throw new TypeError("Arguments to path.resolve must be strings");r&&(e=r+"/"+e,n="/"===r[0])}return e=t(e.split("/"),!n).join("/"),(n?"/":"")+e||"."},f.normalize=function(e){var n=f.isAbsolute(e),o=e&&"/"===e[e.length-1];return e=t(e.split("/"),!n).join("/"),e||n||(e="."),e&&o&&(e+="/"),(n?"/":"")+e},f.isAbsolute=function(e){return"/"===e.charAt(0)},f.join=function(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];if(!s.isString(n))throw new TypeError("Arguments to path.join must be strings");n&&(e+=e?"/"+n:n)}return f.normalize(e)},f.relative=function(e,t){e=f.resolve(e).substr(1),t=f.resolve(t).substr(1);for(var o=n(e.split("/")),r=n(t.split("/")),i=Math.min(o.length,r.length),a=i,s=0;s<i;s++)if(o[s]!==r[s]){a=s;break}for(var l=[],s=a;s<o.length;s++)l.push("..");return l=l.concat(r.slice(a)),l.join("/")},f._makeLong=function(e){return e},f.dirname=function(e){var t=a(e),n=t[0],o=t[1];return n||o?(o&&(o=o.substr(0,o.length-1)),n+o):"."},f.basename=function(e,t){var n=a(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},f.extname=function(e){return a(e)[3]},f.format=function(e){if(!s.isObject(e))throw new TypeError("Parameter 'pathObject' must be an object, not "+typeof e);var t=e.root||"";if(!s.isString(t))throw new TypeError("'pathObject.root' must be a string or undefined, not "+typeof e.root);return(e.dir?e.dir+f.sep:"")+(e.base||"")},f.parse=function(e){if(!s.isString(e))throw new TypeError("Parameter 'pathString' must be a string, not "+typeof e);var t=a(e);if(!t||4!==t.length)throw new TypeError("Invalid path '"+e+"'");return t[1]=t[1]||"",t[2]=t[2]||"",t[3]=t[3]||"",{root:t[0],dir:t[0]+t[1].slice(0,-1),base:t[2],ext:t[3],name:t[2].slice(0,t[2].length-t[3].length)}},f.sep="/",f.delimiter=":",e.exports=h,e.exports.posix=f,e.exports.win32=h,e.exports}(window.$$_module),window.$$_url=function(){function e(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}function t(t,n,o){if(t&&h.isObject(t)&&t instanceof e)return t;var r=new e;return r.parse(t,n,o),r}function n(n){return h.isString(n)&&(n=t(n)),n instanceof e?n.format():e.prototype.format.call(n)}function o(e,n){return t(e,!1,!0).resolve(n)}function r(e,n){return e?t(e,!1,!0).resolveObject(n):n}var i={},a={exports:i},s=function(){"use strict";var e=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};return function(t,n,o,r){return n=n||"&",o=o||"=",null===t&&(t=void 0),"object"==typeof t?Object.keys(t).map(function(r){var i=encodeURIComponent(e(r))+o;return Array.isArray(t[r])?t[r].map(function(t){return i+encodeURIComponent(e(t))}).join(n):i+encodeURIComponent(e(t[r]))}).join(n):r?encodeURIComponent(e(r))+o+encodeURIComponent(e(t)):""}}(),l=function(){"use strict";function e(e,t){return Object.prototype.hasOwnProperty.call(e,t)}return function(t,n,o,r){n=n||"&",o=o||"=";var i={};if("string"!=typeof t||0===t.length)return i;var a=/\+/g;t=t.split(n);var s=1e3;r&&"number"==typeof r.maxKeys&&(s=r.maxKeys);var l=t.length;s>0&&l>s&&(l=s);for(var c=0;c<l;++c){var h,u,f,d,p=t[c].replace(a,"%20"),w=p.indexOf(o);w>=0?(h=p.substr(0,w),u=p.substr(w+1)):(h=p,u=""),f=decodeURIComponent(h),d=decodeURIComponent(u),e(i,f)?Array.isArray(i[f])?i[f].push(d):i[f]=[i[f],d]:i[f]=d}return i}}(),c=function(){return function(e){function t(e){throw RangeError(F[e])}function n(e,t){for(var n=e.length,o=[];n--;)o[n]=t(e[n]);return o}function o(e,t){var o=e.split("@"),r="";return o.length>1&&(r=o[0]+"@",e=o[1]),e=e.replace(k,"."),r+n(e.split("."),t).join(".")}function r(e){for(var t,n,o=[],r=0,i=e.length;r<i;)t=e.charCodeAt(r++),t>=55296&&t<=56319&&r<i?(n=e.charCodeAt(r++),56320==(64512&n)?o.push(((1023&t)<<10)+(1023&n)+65536):(o.push(t),r--)):o.push(t);return o}function s(e){return n(e,function(e){var t="";return e>65535&&(e-=65536,t+=U(e>>>10&1023|55296),e=56320|1023&e),t+=U(e)}).join("")}function l(e){return e-48<10?e-22:e-65<26?e-65:e-97<26?e-97:j}function c(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function h(e,t,n){var o=0;for(e=n?R(e/C):e>>1,e+=R(e/t);e>L*$>>1;o+=j)e=R(e/L);return R(o+(L+1)*e/(e+S))}function u(e){var n,o,r,i,a,c,u,f,d,p,w=[],v=e.length,m=0,g=I,b=x;for(o=e.lastIndexOf(A),o<0&&(o=0),r=0;r<o;++r)e.charCodeAt(r)>=128&&t("not-basic"),w.push(e.charCodeAt(r));for(i=o>0?o+1:0;i<v;){for(a=m,c=1,u=j;i>=v&&t("invalid-input"),f=l(e.charCodeAt(i++)),(f>=j||f>R((y-m)/c))&&t("overflow"),m+=f*c,d=u<=b?_:u>=b+$?$:u-b,!(f<d);u+=j)p=j-d,c>R(y/p)&&t("overflow"),c*=p;n=w.length+1,b=h(m-a,n,0==a),R(m/n)>y-g&&t("overflow"),g+=R(m/n),m%=n,w.splice(m++,0,g)}return s(w)}function f(e){var n,o,i,a,s,l,u,f,d,p,w,v,m,g,b,S=[];for(e=r(e),v=e.length,n=I,o=0,s=x,l=0;l<v;++l)(w=e[l])<128&&S.push(U(w));for(i=a=S.length,a&&S.push(A);i<v;){for(u=y,l=0;l<v;++l)(w=e[l])>=n&&w<u&&(u=w);for(m=i+1,u-n>R((y-o)/m)&&t("overflow"),o+=(u-n)*m,n=u,l=0;l<v;++l)if(w=e[l],w<n&&++o>y&&t("overflow"),w==n){for(f=o,d=j;p=d<=s?_:d>=s+$?$:d-s,!(f<p);d+=j)b=f-p,g=j-p,S.push(U(c(p+b%g,0))),f=R(b/g);S.push(U(c(f,0))),s=h(o,m,i==a),o=0,++i}++o,++n}return S.join("")}function d(e){return o(e,function(e){return O.test(e)?u(e.slice(4).toLowerCase()):e})}function p(e){return o(e,function(e){return E.test(e)?"xn--"+f(e):e})}var w="object"==typeof i&&i&&!i.nodeType&&i,v="object"==typeof a&&a&&!a.nodeType&&a,m="object"==typeof global&&global;m.global!==m&&m.window!==m&&m.self!==m||(e=m);var g,b,y=2147483647,j=36,_=1,$=26,S=38,C=700,x=72,I=128,A="-",O=/^xn--/,E=/[^\x20-\x7E]/,k=/[\x2E\u3002\uFF0E\uFF61]/g,F={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},L=j-_,R=Math.floor,U=String.fromCharCode;if(g={version:"1.3.2",ucs2:{decode:r,encode:s},decode:u,encode:f,toASCII:p,toUnicode:d},"function"==typeof define&&"object"==typeof define.amd&&define.amd)define("punycode",function(){return g});else if(w&&v)if(a.exports==w)v.exports=g;else for(b in g)g.hasOwnProperty(b)&&(w[b]=g[b]);else e.punycode=g;return a.exports}(this)}(),h={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}};i.parse=t,i.resolve=o,i.resolveObject=r,i.format=n,i.Url=e;var u=/^([a-z0-9.+-]+:)/i,f=/:[0-9]*$/,d=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,p=["<",">",'"',"`"," ","\r","\n","\t"],w=["{","}","|","\\","^","`"].concat(p),v=["'"].concat(w),m=["%","/","?",";","#"].concat(v),g=["/","?","#"],b=/^[+a-z0-9A-Z_-]{0,63}$/,y=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,j={javascript:!0,"javascript:":!0},_={javascript:!0,"javascript:":!0},$={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},S={decode:l,parse:l,encode:s,stringify:s};return e.prototype.parse=function(e,t,n){if(!h.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),r=-1!==o&&o<e.indexOf("#")?"?":"#",i=e.split(r),a=/\\/g;i[0]=i[0].replace(a,"/"),e=i.join(r);var s=e;if(s=s.trim(),!n&&1===e.split("#").length){var l=d.exec(s);if(l)return this.path=s,this.href=s,this.pathname=l[1],l[2]?(this.search=l[2],this.query=t?S.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var f=u.exec(s);if(f){f=f[0];var p=f.toLowerCase();this.protocol=p,s=s.substr(f.length)}if(n||f||s.match(/^\/\/[^@\/]+@[^@\/]+/)){var w="//"===s.substr(0,2);!w||f&&_[f]||(s=s.substr(2),this.slashes=!0)}if(!_[f]&&(w||f&&!$[f])){for(var C=-1,x=0;x<g.length;x++){var I=s.indexOf(g[x]);-1!==I&&(-1===C||I<C)&&(C=I)}var A,O;O=-1===C?s.lastIndexOf("@"):s.lastIndexOf("@",C),-1!==O&&(A=s.slice(0,O),s=s.slice(O+1),this.auth=decodeURIComponent(A)),C=-1;for(var x=0;x<m.length;x++){var I=s.indexOf(m[x]);-1!==I&&(-1===C||I<C)&&(C=I)}-1===C&&(C=s.length),this.host=s.slice(0,C),s=s.slice(C),this.parseHost(),this.hostname=this.hostname||"";var E="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!E)for(var k=this.hostname.split(/\./),x=0,F=k.length;x<F;x++){var L=k[x];if(L&&!L.match(b)){for(var R="",U=0,T=L.length;U<T;U++)L.charCodeAt(U)>127?R+="x":R+=L[U];if(!R.match(b)){var N=k.slice(0,x),q=k.slice(x+1),z=L.match(y);z&&(N.push(z[1]),q.unshift(z[2])),q.length&&(s="/"+q.join(".")+s),this.hostname=N.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),E||(this.hostname=c.toASCII(this.hostname));var W=this.port?":"+this.port:"",B=this.hostname||"";this.host=B+W,this.href+=this.host,E&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==s[0]&&(s="/"+s))}if(!j[p])for(var x=0,F=v.length;x<F;x++){var D=v[x];if(-1!==s.indexOf(D)){var H=encodeURIComponent(D);H===D&&(H=escape(D)),s=s.split(D).join(H)}}var M=s.indexOf("#");-1!==M&&(this.hash=s.substr(M),s=s.slice(0,M));var P=s.indexOf("?");if(-1!==P?(this.search=s.substr(P),this.query=s.substr(P+1),t&&(this.query=S.parse(this.query)),s=s.slice(0,P)):t&&(this.search="",this.query={}),s&&(this.pathname=s),$[p]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){var W=this.pathname||"",V=this.search||"";this.path=W+V}return this.href=this.format(),this},e.prototype.format=function(){var e=this.auth||"";e&&(e=encodeURIComponent(e),e=e.replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",o=this.hash||"",r=!1,i="";this.host?r=e+this.host:this.hostname&&(r=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(r+=":"+this.port)),this.query&&h.isObject(this.query)&&Object.keys(this.query).length&&(i=S.stringify(this.query));var a=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||$[t])&&!1!==r?(r="//"+(r||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):r||(r=""),o&&"#"!==o.charAt(0)&&(o="#"+o),a&&"?"!==a.charAt(0)&&(a="?"+a),n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}),a=a.replace("#","%23"),t+r+n+a+o},e.prototype.resolve=function(e){return this.resolveObject(t(e,!1,!0)).format()},e.prototype.resolveObject=function(t){if(h.isString(t)){var n=new e;n.parse(t,!1,!0),t=n}for(var o=new e,r=Object.keys(this),i=0;i<r.length;i++){var a=r[i];o[a]=this[a]}if(o.hash=t.hash,""===t.href)return o.href=o.format(),o;if(t.slashes&&!t.protocol){for(var s=Object.keys(t),l=0;l<s.length;l++){var c=s[l];"protocol"!==c&&(o[c]=t[c])}return $[o.protocol]&&o.hostname&&!o.pathname&&(o.path=o.pathname="/"),o.href=o.format(),o}if(t.protocol&&t.protocol!==o.protocol){if(!$[t.protocol]){for(var u=Object.keys(t),f=0;f<u.length;f++){var d=u[f];o[d]=t[d]}return o.href=o.format(),o}if(o.protocol=t.protocol,t.host||_[t.protocol])o.pathname=t.pathname;else{for(var p=(t.pathname||"").split("/");p.length&&!(t.host=p.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),o.pathname=p.join("/")}if(o.search=t.search,o.query=t.query,o.host=t.host||"",o.auth=t.auth,o.hostname=t.hostname||t.host,o.port=t.port,o.pathname||o.search){var w=o.pathname||"",v=o.search||"";o.path=w+v}return o.slashes=o.slashes||t.slashes,o.href=o.format(),o}var m=o.pathname&&"/"===o.pathname.charAt(0),g=t.host||t.pathname&&"/"===t.pathname.charAt(0),b=g||m||o.host&&t.pathname,y=b,j=o.pathname&&o.pathname.split("/")||[],p=t.pathname&&t.pathname.split("/")||[],S=o.protocol&&!$[o.protocol];if(S&&(o.hostname="",o.port=null,o.host&&(""===j[0]?j[0]=o.host:j.unshift(o.host)),o.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===p[0]?p[0]=t.host:p.unshift(t.host)),t.host=null),b=b&&(""===p[0]||""===j[0])),g)o.host=t.host||""===t.host?t.host:o.host,o.hostname=t.hostname||""===t.hostname?t.hostname:o.hostname,o.search=t.search,o.query=t.query,j=p;else if(p.length)j||(j=[]),j.pop(),j=j.concat(p),o.search=t.search,o.query=t.query;else if(!h.isNullOrUndefined(t.search)){if(S){o.hostname=o.host=j.shift();var C=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@");C&&(o.auth=C.shift(),o.host=o.hostname=C.shift())}return o.search=t.search,o.query=t.query,h.isNull(o.pathname)&&h.isNull(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.href=o.format(),o}if(!j.length)return o.pathname=null,o.search?o.path="/"+o.search:o.path=null,o.href=o.format(),o;for(var x=j.slice(-1)[0],I=(o.host||t.host||j.length>1)&&("."===x||".."===x)||""===x,A=0,O=j.length;O>=0;O--)x=j[O],"."===x?j.splice(O,1):".."===x?(j.splice(O,1),A++):A&&(j.splice(O,1),A--);if(!b&&!y)for(;A--;A)j.unshift("..");!b||""===j[0]||j[0]&&"/"===j[0].charAt(0)||j.unshift(""),I&&"/"!==j.join("/").substr(-1)&&j.push("");var E=""===j[0]||j[0]&&"/"===j[0].charAt(0);if(S){o.hostname=o.host=E?"":j.length?j.shift():"";var C=!!(o.host&&o.host.indexOf("@")>0)&&o.host.split("@");C&&(o.auth=C.shift(),o.host=o.hostname=C.shift())}return b=b||o.host&&j.length,b&&!E&&j.unshift(""),j.length?o.pathname=j.join("/"):(o.pathname=null,o.path=null),h.isNull(o.pathname)&&h.isNull(o.search)||(o.path=(o.pathname?o.pathname:"")+(o.search?o.search:"")),o.auth=t.auth||o.auth,o.slashes=o.slashes||t.slashes,o.href=o.format(),o},e.prototype.parseHost=function(){var e=this.host,t=f.exec(e);t&&(t=t[0],":"!==t&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)},i}(),function(e){function t(e,t,n){if(e=window.jj._path.toURL(e),console.log("* link : (",t,")",e),e){if(!t)return void window.$$_open(e);if("string"==typeof n){n=n.split(",");var o={};n.forEach(function(e){var t=e.split("=");o[t[0].trim()]=t[1]}),n=o}n=n||{};var r="resizable=1, status="+(n.status||0)+", menubar="+(n.menubar||0)+", titlebar="+(n.titlebar||0);n.width&&(r=r+", width="+n.width),n.height&&(r=r+", height="+n.height),window.$$_popup=function(e){e.$$_parameter=n.parameter,n.onOpen&&(e.$$_onOpenHandler=n.onOpen),n.onClose&&(e.$$_onCloseHandler=n.onClose),console.debug("# 팝업창에 속성값 전달 완료함"),delete window.$$_popup};window.$$_open(e,t,r)}}function n(e,n,o,r){var i=window.jj._global,a=e.split("?"),s=a[0];if(s=jj._path.toURL(s)){s.lastIndexOf("/")!=s.length-1&&(s+="/");var l=a[1]?"&"+a[1]:"";l="contentInformationURL="+s+l;var c=o||{};for(var h in c)l+="&"+h+"="+c[h];var u=jj._path.toURL(r)||i.path.viewer.ebook,f=u+"?"+encodeURIComponent(l);console.log("* ebook : ",f),n=n||"_blank",t(f,n,o)}}function o(e,n,o,r){console.log("* image : ",e);var i=window.jj._global,a=jj._path.toURL(r)||i.path.viewer.image;e=window.jj._path.toURL(e),e=encodeURIComponent(e),o=o||{},void 0===o.width&&(o.width=700),void 0===o.height&&(o.height=500);var s=a+"?content_url="+e;n=n||"_blank",t(s,n,o)}function r(e,n,o,r){console.log("* pdf : ",e);var i=window.jj._global,a=jj._path.toURL(r)||i.path.viewer.pdf;e=window.jj._path.toURL(e),e=encodeURIComponent(e),n=n||"_blank",t(a+"?content_url="+e,n,o)}function i(e,n,o,r){console.log("* audio : ",e);var i=window.jj._global,a=jj._path.toURL(r)||i.path.viewer.audio;e=window.jj._path.toURL(e),e=encodeURIComponent(e),o=o||{},void 0===o.width&&(o.width=500),void 0===o.height&&(o.height=50),n=n||"_blank",t(a+"?content_url="+e,n,o)}function a(e,n,o,r){console.log("* video : ",e);var i=window.jj._global,a=jj._path.toURL(r)||i.path.viewer.video;e=window.jj._path.toURL(e),e=encodeURIComponent(e),o=o||{},void 0===o.width&&(o.width=700),void 0===o.height&&(o.height=500),n=n||"_blank",t(a+"?content_url="+e,n,o)}function s(e,n,o,r){console.log("* flash : ",e);var i=window.jj._global,a=jj._path.toURL(r)||i.path.viewer.flash;e=window.jj._path.toURL(e),e=encodeURIComponent(e),n=n||"_blank",t(a+"?content_url="+e,n,o)}e.api.linker={html:t,ebook:n,image:o,pdf:r,audio:i,video:a,flash:s}}(window.$$_module),function(e){function t(e,t){void 0==a[e]&&(a[e]=[]),a[e].push(t)}function n(e,t){if(void 0!=a[e]){var n=a[e],o=n.length-1;if(!(o<0))for(var r=o;r>=0;--r)n[r].toString()==t.toString()&&n.splice(r,1)}}function o(e){void 0!=a[e]&&delete a[e]}function r(e,t){if(window&&window.jj)try{var n=a[e];if(n){console.log("* _callHandler 호출 (",e,") : ",t);for(var o=n.length,r=0;r<o;++r){var i=n[r];if(i&&i.apply(window,t))return!0}}}catch(t){var s='["'+e+'" 이벤트 핸들러에서 스크립트 오류]\n\n'+(t.stack||t);console.error(s)}}function i(e,t){if(console.log("* send message : ",t),!e||!e.jj)return void console.debug("# message를 전송할 수 없습니다.");e.jj.event._callHandler.apply(e,["message",[t,window]])}e.api.listener={addListener:t,removeListener:n,removeAllListeners:o,_callHandler:r,message:i,__getListener:function(){return a}};var a={}}(window.$$_module),function(e){function t(e,t){console.log("CLOSE : ",e),window.jj._closeData=e,t||window.$$_close()}function n(){var e=document.body;document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement?document.exitFullscreen?document.exitFullscreen():document.msExitFullscreen?document.msExitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitExitFullscreen&&document.webkitExitFullscreen():e.requestFullscreen?e.requestFullscreen():e.msRequestFullscreen?e.msRequestFullscreen():e.mozRequestFullScreen?e.mozRequestFullScreen():e.webkitRequestFullscreen&&e.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)}function o(e,t){console.log("* download : ",e),window.jj.link.html(e,"_self")}e.api.native={toggleFullscreen:n,download:o,close:t},function(){function e(){var e=document.createElement("DIV");e.style.backgroundColor="white",e.style.zIndex=-1e5,e.style.position="fixed",e.style.left=0,e.style.top=0,e.style.width="100%",e.style.height="100%",e.id="temparary_fullscreen_background_color",document.body.appendChild(e)}function t(){var e=document.getElementById("temparary_fullscreen_background_color");e&&e.remove()}$(document).on("fullscreenchange webkitfullscreenchange mozfullscreenchange MSFullscreenChange",function(n){document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement||document.msFullscreenElement?e():t()})}()}(window.$$_module),function(e){function t(e){if(!e)return e;var t=window;if(!t||!t.jj)return console.error("window를 사용할 수 없습니다.");var n=require("path"),r=t.jj._global,i=r.path._root,a=r.path.resource,s=r.path.user;if(e=e.trim(),!i)return e;if(0===e.search(/(\S(?!\?))+?:\//))return 0===e.search(/http(s)?:\/\//)?e:0===e.search(/root:\/\//)?e=e.replace(/root:\/\//,i+"/"):0===e.search(/resource:\/\//)?e=e.replace(/resource:\//,a):0===e.search(/user:\/\//)?e=e.replace(/user:\//,s):void alert("허용되지 않는 경로 표기 입니다.(toURL:허용안된 프로토콜 접근)\n"+e);if(0===e.search(/(\S(?!\?))+?:\\/)&&alert("허용되지 않는 경로 표기 입니다.(toURL:절대 경로로 접근)\n"+e),0===e.indexOf("/"))return 0!==e.indexOf(i)&&(e=i+e),e;var l=o(),c=n.resolve(i,"."+l);return e=n.resolve(c,e),e=e.replace(/\\/gim,"/"),i&&"/"!==i&&0===e.indexOf(i)&&(e=e.replace(i,"")),console.log("_rootFolder : ",i),console.log("URL : ",e),e}function n(e){if(e=e.trim(),0===e.search(/(\S(?!\?))+?:\/\//))return void alert("지원되지 않는 프로토콜 형식입니다.\n * path - "+e);var t=require("path"),n=window.jj._global;if(0===e.search(/(\S(?!\?))+?:\\\\/)||0===e.search(/(\S(?!\?))+?:\\/))return e=e.replace(/\//gim,t.sep);if(0===e.indexOf("/"))return e=t.resolve(n.path._root,"."+e),e=e.replace(/\//gim,t.sep);var r=n.path._root;if(!r)return e;var i=o(),a=t.resolve(r,"."+i);return e=t.resolve(a,e)}function o(){var e;e=window.document.head.baseURI?window.document.head.baseURI:window.location.href,e=e.split("?")[0];var t=require("path"),n=t.parse(e);e=n.ext?n.dir:n.dir+"/"+n.base,e.search("/")!=e.length-1&&(e+="/"),e.replace("\\","/");var o=window.location.origin.replace("\\","/");return e=e.replace(o,"")}e.api.path={toURL:t,toAbsolutePath:n}}(window.$$_module),function(e){function t(e,t,n){this._swfURL=e,this._swfVersionStr="11.1.0",this._xiSwfUrlStr="/viewer/flash/playerProductInstall.swf",this._flashContainerID="flashContent",this._flashID="flashApplication",this._swf=null,this.callJSContext=n,this.bgcolor="#FFFFFF",this.flashWidth="100%",this.flashHeight="100%",this.wmode="opaque",this.scale="showAll",this.quality="high",this.menu=!1,this.initialize(t)}function n(e){this.interfaceFunctionName=e}e.api2.swf=function(e){return new n(e)},t.prototype={initialize:function(e){for(var t in e)t in this&&(this[t]=e[t])},createSWF:function(t){"object"!=typeof(t=t||{})&&alert("플래시에 전달할 값은 key:value 형식에 객체여야 합니다.\nvalue 값에는 복합데이터는 전달되지 않습니다.\n\n- 현재 전달된 값 : "+t);var n={};n.quality=this.quality,n.bgcolor=this.bgcolor,n.allowscriptaccess="always",n.allowfullscreen="true",n.wmode=this.wmode,n.swLiveConnect="true",n.scale=this.scale,n.quality=this.quality,n.menu=this.menu;var o={};o.id=this._flashID,o.name=this._flashID,o.align="middle";var r=(new Date).getTime(),i=this._swfURL+"?time="+r,a=e.api2.swfobject();a.embedSWF(i,this._flashContainerID,this.flashWidth,this.flashHeight,this._swfVersionStr,this._xiSwfUrlStr,t,n,o),a.createCSS("#"+this._flashID,"display:block;text-align:left;")},getSWF:function(){if(!this._swf){var e=-1!=navigator.appName.indexOf("Microsoft");this._swf=e?window.document.all[this._flashID]:window.document[this._flashID]}if(!this._swf){var t=this._flashID+" : SWF 객체에 아직 접근할 수 없습니다.";console.error(t,"Error",!0)}return this._swf},swfInterface:function(e){this._callJSMethodName=e,this.setGlobalMethod(this._callJSMethodName,this.callJSContext)},_swfLoaded:!1,_lazyCallback:void 0,_onLoadComplate:function(e){if(this._swfLoaded)return void(e&&e());this._lazyCallback=e},setGlobalMethod:function(e,t){if(!e)return console.log("* 통신을 위한 Global 메서드 네임이 지정되지 않았습니다."),void console.log("* ExternalInterface.call에서 일괄적으로 사용되는 이름을 지정하십시오.");var n=this;window[e]=function(e){if(void 0===e)return n._swfLoaded=!0,void(n._lazyCallback&&(n._lazyCallback(),n._lazyCallback=null));n.toJS(e,t)},console.log("* Global 변수 "+e+"이 정의 되었습니다.\n* "+e+"를 이용하여 SWF로부터 함수 호출을 전달 받습니다. (",this._flashID,")")},toJS:function(e,t){var n=e.apiName,o=e.params;if(o&&!Array.isArray(o))return void alert("JS 호출 매개변수를 배열로 전달해야 합니다.");console.log("[JS의 다음 함수를 호출 : ]"),console.log("\t *function : ",n),console.log("\t *param : ",o),t=window;var r=t,i=n.split(".");for("window"==i[0]&&i.shift();r&&i.length>0;){var a=i.shift();t=r,r=r[a]}if(r&&"function"==typeof r)return r.apply(t,o);var s="* 정의되지 않은 js 메서드를 호출함 : "+n;return alert(s),null},toSWF:function(e,t){if(e){var n=this.getSWF();if(!n){return void alert("SWF 객체를 찾을 수 없어 콜백 함수를 호출할 수 없습니다.")}return this._swfLoaded?(console.log("[swf의 다음 함수를 호출 : ]"),console.log("\t *function : ",e),console.log("\t *param : ",t),e in n?n[e](t):"error"):void alert("SWF 객체와 통신이 설정되지 않았습니다.")}}};var o=require("path");n.prototype={security:function(){if(0===window.location.protocol.indexOf("http"))return void console.log("* [Flash] web 실행시 보안설정을 하지 않습니다.");var e=require("nw-flash-trust");if(!e)return console.error("* 전역 보안설정을 할 수 없습니다.");if(!window.nw)return console.error("* manifest 파일 정보를 알수 없습니다.");var t=window.jj._global.manifest.name,n=window.nw.App.dataPath+"\\Pepper Data\\Shockwave Flash\\WritableRoot\\",o=window.location.origin+window.jj._global.path.resource;try{var r=e.initSync(t,n);r.isTrusted(o)||r.add(o)}catch(e){console.error("Flash Trust : ",e)}},_baseURI:function(e){var t=window.jj._path.toURL(e),n=o.parse(t).dir+"/";if(window.document.head){var r=window.document.getElementsByTagName("base")[0];if(r)r.setAttribute("href",n);else{r=window.document.createElement("base");var i=window.document.createAttribute("href");i.value=n,r.setAttributeNode(i)}window.document.head.appendChild(r)}else window.document.head.innerHTML='<base href="'+n+'">'},_helper:void 0,interfaceFunctionName:void 0,create:function(e,n,o,r){this.security(),this._baseURI(e);var i=window;console.log("\n\n------------------------------------"),console.debug("# SWF Interface"),this._helper=new t(e,n,i),this._helper.createSWF(o),this.interfaceFunctionName=this.interfaceFunctionName||"jjCall",this._helper.swfInterface(this.interfaceFunctionName),console.log("* created SWF"),console.log("------------------------------------\n\n"),this._helper._onLoadComplate(r)},toSWF:function(e,t){return this._helper.toSWF(e,t)}}}(window.$$_module),function(e){function t(){function e(){if(!W){try{var e=L.getElementsByTagName("body")[0].appendChild(v("span"));e.parentNode.removeChild(e)}catch(e){return}W=!0;for(var t=T.length,n=0;n<t;n++)T[n]()}}function t(e){W?e():T[T.length]=e}function n(e){if(typeof F.addEventListener!=A)F.addEventListener("load",e,!1);else if(typeof L.addEventListener!=A)L.addEventListener("load",e,!1);else if(typeof F.attachEvent!=A)m(F,"onload",e);else if("function"==typeof F.onload){var t=F.onload;F.onload=function(){t(),e()}}else F.onload=e}function o(){U?r():i()}function r(){var e=L.getElementsByTagName("body")[0],t=v(O);t.setAttribute("type",E);var n=e.appendChild(t);if(n){var o=0;!function(){if(typeof n.GetVariable!=A){var r=n.GetVariable("$version");r&&(r=r.split(" ")[1].split(","),H.pv=[parseInt(r[0],10),parseInt(r[1],10),parseInt(r[2],10)])}else if(o<10)return o++,void setTimeout(arguments.callee,10);e.removeChild(t),n=null,i()}()}else i()}function i(){var e=N.length;if(e>0)for(var t=0;t<e;t++){var n=N[t].id,o=N[t].callbackFn,r={success:!1,id:n};if(H.pv[0]>0){var i=w(n);if(i)if(!g(N[t].swfVersion)||H.wk&&H.wk<312)if(N[t].expressInstall&&s()){var h={};h.data=N[t].expressInstall,h.width=i.getAttribute("width")||"0",h.height=i.getAttribute("height")||"0",i.getAttribute("class")&&(h.styleclass=i.getAttribute("class")),i.getAttribute("align")&&(h.align=i.getAttribute("align"));for(var u={},f=i.getElementsByTagName("param"),d=f.length,p=0;p<d;p++)"movie"!=f[p].getAttribute("name").toLowerCase()&&(u[f[p].getAttribute("name")]=f[p].getAttribute("value"));l(h,u,n,o)}else c(i),o&&o(r);else y(n,!0),o&&(r.success=!0,r.ref=a(n),o(r))}else if(y(n,!0),o){var v=a(n);v&&typeof v.SetVariable!=A&&(r.success=!0,r.ref=v),o(r)}}}function a(e){var t=null,n=w(e);if(n&&"OBJECT"==n.nodeName)if(typeof n.SetVariable!=A)t=n;else{var o=n.getElementsByTagName(O)[0];o&&(t=o)}return t}function s(){return!B&&g("6.0.65")&&(H.win||H.mac)&&!(H.wk&&H.wk<312)}function l(e,t,n,o){B=!0,S=o||null,C={success:!1,id:n};var r=w(n);if(r){"OBJECT"==r.nodeName?(_=h(r),$=null):(_=r,$=n),e.id=k,(typeof e.width==A||!/%$/.test(e.width)&&parseInt(e.width,10)<310)&&(e.width="310"),(typeof e.height==A||!/%$/.test(e.height)&&parseInt(e.height,10)<137)&&(e.height="137"),L.title=L.title.slice(0,47)+" - Flash Player Installation";var i=H.ie&&H.win?"ActiveX":"PlugIn",a="MMredirectURL="+encodeURI(window.location).toString().replace(/&/g,"%26")+"&MMplayerType="+i+"&MMdoctitle="+L.title;if(typeof t.flashvars!=A?t.flashvars+="&"+a:t.flashvars=a,H.ie&&H.win&&4!=r.readyState){var s=v("div");n+="SWFObjectNew",s.setAttribute("id",n),r.parentNode.insertBefore(s,r),r.style.display="none",function(){4==r.readyState?r.parentNode.removeChild(r):setTimeout(arguments.callee,10)}()}u(e,t,n)}}function c(e){if(H.ie&&H.win&&4!=e.readyState){var t=v("div");e.parentNode.insertBefore(t,e),t.parentNode.replaceChild(h(e),t),e.style.display="none",function(){4==e.readyState?e.parentNode.removeChild(e):setTimeout(arguments.callee,10)}()}else e.parentNode.replaceChild(h(e),e)}function h(e){var t=v("div");if(H.win&&H.ie)t.innerHTML=e.innerHTML;else{
var n=e.getElementsByTagName(O)[0];if(n){var o=n.childNodes;if(o)for(var r=o.length,i=0;i<r;i++)1==o[i].nodeType&&"PARAM"==o[i].nodeName||8==o[i].nodeType||t.appendChild(o[i].cloneNode(!0))}}return t}function u(e,t,n){var o,r=w(n);if(H.wk&&H.wk<312)return o;if(r)if(typeof e.id==A&&(e.id=n),H.ie&&H.win){var i="";for(var a in e)e[a]!=Object.prototype[a]&&("data"==a.toLowerCase()?t.movie=e[a]:"styleclass"==a.toLowerCase()?i+=' class="'+e[a]+'"':"classid"!=a.toLowerCase()&&(i+=" "+a+'="'+e[a]+'"'));var s="";for(var l in t)t[l]!=Object.prototype[l]&&(s+='<param name="'+l+'" value="'+t[l]+'" />');r.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+i+">"+s+"</object>",q[q.length]=e.id,o=w(e.id)}else{var c=v(O);c.setAttribute("type",E);for(var h in e)e[h]!=Object.prototype[h]&&("styleclass"==h.toLowerCase()?c.setAttribute("class",e[h]):"classid"!=h.toLowerCase()&&c.setAttribute(h,e[h]));for(var u in t)t[u]!=Object.prototype[u]&&"movie"!=u.toLowerCase()&&f(c,u,t[u]);r.parentNode.replaceChild(c,r),o=c}return o}function f(e,t,n){var o=v("param");o.setAttribute("name",t),o.setAttribute("value",n),e.appendChild(o)}function d(e){var t=w(e);t&&"OBJECT"==t.nodeName&&(H.ie&&H.win?(t.style.display="none",function(){4==t.readyState?p(e):setTimeout(arguments.callee,10)}()):t.parentNode.removeChild(t))}function p(e){var t=w(e);if(t){for(var n in t)"function"==typeof t[n]&&(t[n]=null);t.parentNode.removeChild(t)}}function w(e){var t=null;try{t=L.getElementById(e)}catch(e){}return t}function v(e){return L.createElement(e)}function m(e,t,n){e.attachEvent(t,n),z[z.length]=[e,t,n]}function g(e){var t=H.pv,n=e.split(".");return n[0]=parseInt(n[0],10),n[1]=parseInt(n[1],10)||0,n[2]=parseInt(n[2],10)||0,t[0]>n[0]||t[0]==n[0]&&t[1]>n[1]||t[0]==n[0]&&t[1]==n[1]&&t[2]>=n[2]}function b(e,t,n,o){if(!H.ie||!H.mac){var r=L.getElementsByTagName("head")[0];if(r){var i=n&&"string"==typeof n?n:"screen";if(o&&(x=null,I=null),!x||I!=i){var a=v("style");a.setAttribute("type","text/css"),a.setAttribute("media",i),x=r.appendChild(a),H.ie&&H.win&&typeof L.styleSheets!=A&&L.styleSheets.length>0&&(x=L.styleSheets[L.styleSheets.length-1]),I=i}H.ie&&H.win?x&&typeof x.addRule==O&&x.addRule(e,t):x&&typeof L.createTextNode!=A&&x.appendChild(L.createTextNode(e+" {"+t+"}"))}}}function y(e,t){if(D){var n=t?"visible":"hidden";W&&w(e)?w(e).style.visibility=n:b("#"+e,"visibility:"+n)}}function j(e){return null!=/[\\\"<>\.;]/.exec(e)&&typeof encodeURIComponent!=A?encodeURIComponent(e):e}var _,$,S,C,x,I,A="undefined",O="object",E="application/x-shockwave-flash",k="SWFObjectExprInst",F=window,L=window.document,R=window.navigator,U=!1,T=[o],N=[],q=[],z=[],W=!1,B=!1,D=!0,H=function(){var e=typeof L.getElementById!=A&&typeof L.getElementsByTagName!=A&&typeof L.createElement!=A,t=R.userAgent.toLowerCase(),n=R.platform.toLowerCase(),o=/win/.test(n?n:t),r=/mac/.test(n?n:t),i=!!/webkit/.test(t)&&parseFloat(t.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")),a=!1,s=[0,0,0],l=null;if(typeof R.plugins!=A&&typeof R.plugins["Shockwave Flash"]==O)!(l=R.plugins["Shockwave Flash"].description)||typeof R.mimeTypes!=A&&R.mimeTypes[E]&&!R.mimeTypes[E].enabledPlugin||(U=!0,a=!1,l=l.replace(/^.*\s+(\S+\s+\S+$)/,"$1"),s[0]=parseInt(l.replace(/^(.*)\..*$/,"$1"),10),s[1]=parseInt(l.replace(/^.*\.(.*)\s.*$/,"$1"),10),s[2]=/[a-zA-Z]/.test(l)?parseInt(l.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0);else if(typeof F.ActiveXObject!=A)try{var c=new ActiveXObject("ShockwaveFlash.ShockwaveFlash");c&&(l=c.GetVariable("$version"))&&(a=!0,l=l.split(" ")[1].split(","),s=[parseInt(l[0],10),parseInt(l[1],10),parseInt(l[2],10)])}catch(e){}return{w3:e,pv:s,wk:i,ie:a,win:o,mac:r}}();(function(){H.w3&&((typeof L.readyState!=A&&"complete"==L.readyState||typeof L.readyState==A&&(L.getElementsByTagName("body")[0]||L.body))&&e(),W||(typeof L.addEventListener!=A&&L.addEventListener("DOMContentLoaded",e,!1),H.ie&&H.win&&(L.attachEvent("onreadystatechange",function(){"complete"==L.readyState&&(L.detachEvent("onreadystatechange",arguments.callee),e())}),F==top&&function(){if(!W){try{L.documentElement.doScroll("left")}catch(e){return void setTimeout(arguments.callee,0)}e()}}()),H.wk&&function(){if(!W)/loaded|complete/.test(L.readyState)?e():setTimeout(arguments.callee,0)}(),n(e)))})(),function(){H.ie&&H.win&&window.attachEvent("onunload",function(){for(var e=z.length,t=0;t<e;t++)z[t][0].detachEvent(z[t][1],z[t][2]);for(var n=q.length,o=0;o<n;o++)d(q[o]);for(var r in H)H[r]=null;H=null;for(var i in swfobject)swfobject[i]=null;swfobject=null})}();return{registerObject:function(e,t,n,o){if(H.w3&&e&&t){var r={};r.id=e,r.swfVersion=t,r.expressInstall=n,r.callbackFn=o,N[N.length]=r,y(e,!1)}else o&&o({success:!1,id:e})},getObjectById:function(e){if(H.w3)return a(e)},embedSWF:function(e,n,o,r,i,a,c,h,f,d){var p={success:!1,id:n};H.w3&&!(H.wk&&H.wk<312)&&e&&n&&o&&r&&i?(y(n,!1),t(function(){o+="",r+="";var t={};if(f&&typeof f===O)for(var w in f)t[w]=f[w];t.data=e,t.width=o,t.height=r;var v={};if(h&&typeof h===O)for(var m in h)v[m]=h[m];if(c&&typeof c===O)for(var b in c)typeof v.flashvars!=A?v.flashvars+="&"+b+"="+c[b]:v.flashvars=b+"="+c[b];if(g(i)){var j=u(t,v,n);t.id==n&&y(n,!0),p.success=!0,p.ref=j}else{if(a&&s())return t.data=a,void l(t,v,n,d);y(n,!0)}d&&d(p)})):d&&d(p)},switchOffAutoHideShow:function(){D=!1},ua:H,getFlashPlayerVersion:function(){return{major:H.pv[0],minor:H.pv[1],release:H.pv[2]}},hasFlashPlayerVersion:g,createSWF:function(e,t,n){return H.w3?u(e,t,n):void 0},showExpressInstall:function(e,t,n,o){H.w3&&s()&&l(e,t,n,o)},removeSWF:function(e){H.w3&&d(e)},createCSS:function(e,t,n,o){H.w3&&b(e,t,n,o)},addDomLoadEvent:t,addLoadEvent:n,getQueryParamValue:function(e){var t=L.location.search||L.location.hash;if(t){if(/\?/.test(t)&&(t=t.split("?")[1]),null==e)return j(t);for(var n=t.split("&"),o=0;o<n.length;o++)if(n[o].substring(0,n[o].indexOf("="))==e)return j(n[o].substring(n[o].indexOf("=")+1))}return""},expressInstallCallback:function(){if(B){var e=w(k);e&&_&&(e.parentNode.replaceChild(_,e),$&&(y($,!0),H.ie&&H.win&&(_.style.display="block")),S&&S(C)),B=!1}}}}e.api2.swfobject=function(){return t()}}(window.$$_module),function(e){function t(t){console.log("# JJ API 생성"),t||alert("전역 데이터가 전달되지 않았습니다."),window.jj=n(t),window.jj._path=e.api.path,window.jj.link=e.api.linker,window.jj.event=e.api.listener,window.jj.native=e.api.native,window.jj.newSWF=e.api2.swf,window.$$_open=window.open,window.open=window.jj.link.html,window.$$_close=window.close,window.close=window.jj.native.close}function n(e){return{_global:e,parent:function(){return window.parent},opener:function(){for(var e,t=window;;){if(t.opener){e=window.opener;break}if(t==t.parent)break;t=t.parent}return e},getRootWindow:r,getContainerWindow:i}}function o(){for(var e,t=window;;){if(t.parent){e=window.parent;break}if(t==t.parent)break;t=t.parent}return e}function r(){return o()}function i(){return o()}e.core.api={run:t}}(window.$$_module),function(e){function t(){return console.log("# DATA 설정"),a=n(),o(),a}function n(){return{path:{}}}function o(){var e=r(s,"./resource"),t=r(s,"./viewer");a.path={_root:s,root:i(s),_resource:e,resource:i(e),viewer:{blank:i(t,"./blank.html"),window:i(t,"./window.html"),_base:t,ebook:i(t,"./ebook/index.html"),image:i(t,"./image/launcher.html"),pdf:i(t,"./pdf/launcher.html"),audio:i(t,"./audio/launcher.html"),video:i(t,"./video/launcher.html"),flash:i(t,"./flash/launcher.html"),web:i(t,"./web/index.html")}},console.log("# 전역변수 생성 : ",a)}function r(e,t){var n=require("path");return t?n.resolve(e,t).replace(/\\/g,"/"):e.replace(/\\/g,"/")}function i(e,t){var n=r(e,t);return n=n.replace(/\\/gim,"/"),0==n.indexOf(s)&&(n=n.replace(s,"")),n||(n="/"),n}e.core.data={run:t};var a,s=r(window.process.cwd())}(window.$$_module),function(e){if(!window.jj){var t=function(e){return e&&e.parent&&e.parent!=e}(window),n=window.location.href;console.debug("* IFRAME : (",t,")"),console.debug("* URL : ",n);var o=e.core.data.run();e.core.api.run(o),window.opener&&window.opener.$$_popup&&(window.opener.console&&window.opener.console.debug("# 새창에서 전달값 세팅을 요청함"),window.opener.$$_popup(window)),window.jj.parameter=window.$$_parameter,delete window.$$_parameter,window.$$_onOpenHandler&&(window.jj.event.addListener("open",window.$$_onOpenHandler),delete window.$$_onOpenHandler),window.$$_onCloseHandler&&(window.jj.event.addListener("close",window.$$_onCloseHandler),delete window.$$_onCloseHandler),$(document).ready(function(){document.body.oncontextmenu=function(){return!1},console.log("# 페이지 세팅 종료"),console.log("\n\n"),$(window).on("unload",function(){console.log("# onClose 핸들러 실행"),window.jj.event._callHandler("close",[window.jj._closeData,window])}),console.log("# onOpen 핸들러 실행 : ",window.$$_onOpenHandler),window.jj.event._callHandler("open",[window])}),jj}}(window.$$_module);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
